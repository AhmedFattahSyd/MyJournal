//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Mpg Item module  
//////////////////////////////////////////////////////////////////////////////////////////////////////////
import MpgRootItem from './MpgRootItem';
import { MpgDataClasses } from './MpgDataClasses'
import MpgRel from './MpgRel'
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Mpg Item class
//////////////////////////////////////////////////////////////////////////////////////////////////////////
export default class MpgItem extends MpgRootItem {
    private categoryId: string = ''
    private tagRels: MpgRel[]
    private goalRels: MpgRel[]
    private actionRels: MpgRel[]
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(categoryId: string, name: string, importance: number, id: string = '') {
        super(MpgDataClasses.Item, name, importance, id)
        this.categoryId = categoryId
        this.tagRels = []
        this.goalRels = []
        this.actionRels = []
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // get categoryId
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    getCategoryId = (): string => {
        return this.categoryId
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // set category
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    setCategoryId = (id: string) => {
        // category can be '' or a valid category id
        // should we validate here?
        this.categoryId = id
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // add tag Rel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    addTagRel = (tagRel: MpgRel) => {
        this.tagRels.push(tagRel)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // add action Rel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    addActionRel = (actionRel: MpgRel) => {
        this.actionRels.push(actionRel)
    }
     ///////////////////////////////////////////////////////////////////////////////////////////////
    // add goal Rel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    addGoalRel = (goal: MpgRel) => {
        this.goalRels.push(goal)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get goal
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getGoals = (): MpgItem[] => {
        const foundGoals: MpgItem[] = []
        this.goalRels.forEach(goalRel => {
            foundGoals.push(goalRel.getItem2())
        })
        return foundGoals
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get actions
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getActions = (): MpgItem[] => {
        const foundActions: MpgItem[] = []
        this.actionRels.forEach(actionRel => {
            foundActions.push(actionRel.getItem2())
        })
        return foundActions
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get goal rels
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getGoalRels = (): MpgRel[] => {
        return this.goalRels
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get action rels
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getActionRels = (): MpgRel[] => {
        return this.actionRels
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get TagRel for Tag
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getTagRel4Tag = (tag: MpgItem): MpgRel | undefined => {
        let foundTagRel: MpgRel | undefined = undefined
        for (const tagRel of this.tagRels) {
            if (tagRel.getItem2().getId() == tag.getId()) {
                foundTagRel = tagRel
                break
            }
        }
        return foundTagRel
    }
     ///////////////////////////////////////////////////////////////////////////////////////////////
    // get actionRel for action
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getActionRel4Action = (tag: MpgItem): MpgRel | undefined => {
        let foundActionRel: MpgRel | undefined = undefined
        for (const actionRel of this.actionRels) {
            if (actionRel.getItem2().getId() == tag.getId()) {
                foundActionRel = actionRel
                break
            }
        }
        return foundActionRel
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get goalRel for a goal
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getGoalRel4Goal = (goal: MpgItem): MpgRel | undefined => {
        let foundGoalRel: MpgRel | undefined = undefined
        for (const goalRel of this.goalRels) {
            if (goalRel.getItem2().getId() == goal.getId()) {
                foundGoalRel = goalRel
                break
            }
        }
        return foundGoalRel
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // has tag 
    ///////////////////////////////////////////////////////////////////////////////////////////////
    hasTag = (tagId: string): boolean => {
        let hasTag: boolean = false
        for (const tagRel of this.tagRels) {
            if (tagRel.getItem2().getId() == tagId) {
                hasTag = true
                break
            }
        }
        return hasTag
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // add goal Rel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // addGoalRel = (goal: MpgRel) => {
    //     this.tagRels.push(goal)
    // }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // get tags
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getTags = (): MpgItem[] => {
        const foundTags: MpgItem[] = []
        this.tagRels.forEach(tagRel => {
            foundTags.push(tagRel.getItem2())
        })
        return foundTags
    }
    ////////////////////////////////w///////////////////////////////////////////////////////////////
    // get goal rels
    ///////////////////////////////////////////////////////////////////////////////////////////////
    getTagRels = (): MpgRel[] => {
        return this.tagRels
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // has goal 
    ///////////////////////////////////////////////////////////////////////////////////////////////
    hasGoal = (GoalId: string): boolean => {
        let hasGoal: boolean = false
        for (const goalRel of this.tagRels) {
            if (goalRel.getItem2().getId() == GoalId) {
                hasGoal = true
                break
            }
        }
        return hasGoal
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // remove tagRel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    removeTagRel = (TagRelId: string)=>{
        this.tagRels = this.tagRels.filter(tagRel=> tagRel.getId() != TagRelId)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // remove goalRel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    removeGoalRel = (goalRelId: string)=>{
        this.goalRels = this.goalRels.filter(goalRel=> goalRel.getId() != goalRelId)
    }
     ///////////////////////////////////////////////////////////////////////////////////////////////
    // remove actionlRel
    ///////////////////////////////////////////////////////////////////////////////////////////////
    removeActionRel = (actionRelId: string)=>{
        this.actionRels = this.actionRels.filter(actionRel=> actionRel.getId() != actionRelId)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // has all tags
    ///////////////////////////////////////////////////////////////////////////////////////////////
    hasAllTags=(tags: MpgItem[]): boolean =>{
        // const allFlags = tags.map(tag=>this.hasTag(tag.getId()))
        // let hasAllTags: boolean = true
        // allFlags.forEach(flag=>{
        //     // console.log(`MpgItem: hasAllTags: item:`, this.getName(),` AllFlags:`,allFlags, ` flag:`,flag,
        //     //  `hasAllTags:`,hasAllTags);
        //     if(!flag){
        //         hasAllTags = false
        //     }
        // })
        // return hasAllTags
        return tags.map(tag=>this.hasTag(tag.getId())).reduce((acc, hasTag)=> {return(acc && hasTag)},true)
    }
}