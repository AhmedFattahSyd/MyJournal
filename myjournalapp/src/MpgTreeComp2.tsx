///////////////////////////////////////////////////////////////////////////////////////////////
// MPG Tree View component
// displays list of items in a tree view
///////////////////////////////////////////////////////////////////////////////////////////////
import * as React from "react";
import { Card, List, ListItem, ListItemText } from "@material-ui/core";
import MpgLogger from "./MpgLogger";
import MpgItem, { ItemState } from "./MpgItem";
import MpgGraph from "./MpgGraph";
import { withRouter, RouteComponentProps } from "react-router-dom";
import TreeView from "@material-ui/lab/TreeView";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import ChevronRightIcon from "@material-ui/icons/ChevronRight";
import TreeItem from "@material-ui/lab/TreeItem";
import MpgTheme from "./MpgTheme";
///////////////////////////////////////////////////////////////////////////////////////////////
// define interfaces for state and props
///////////////////////////////////////////////////////////////////////////////////////////////
interface ITreeProps extends RouteComponentProps {
  toggleSidebarVisibility: (
    event: React.MouseEvent<HTMLSpanElement, MouseEvent>
  ) => void;
  mpgGraph: MpgGraph;
  mpgLogger: MpgLogger;
  itemList: MpgItem[];
}
interface ITreeState {
  rootItems: MpgItem[];
  listOpen: boolean
}
///////////////////////////////////////////////////////////////////////////////////////////////
// MPG Tree component class
///////////////////////////////////////////////////////////////////////////////////////////////
class MpgTreeCompBase extends React.Component<ITreeProps, ITreeState> {
  constructor(props: ITreeProps) {
    super(props);
    this.state = {
      rootItems: props.mpgGraph.getRootItems(props.itemList),
      listOpen: false,
    };
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // render entry list
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  render = () => {
    return (
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "flex-start",
          margin: 0
        }}
      >
        {this.renderTree()}
      </div>
    );
  };
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // render tree
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  renderTree = () => {
    return (
      <div>
        <List>
          {this.state.rootItems.map(item => this.renderItemCard(item))}
        </List>
      </div>
    );
  };
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // render item card
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  renderItemCard = (item: MpgItem, offset: number = 0) => {
    offset += 5;
    return (
      <ListItem
        button
        key={item.getId()}
        style={{ margin: 5, backgroundColor: "white" }}
      >
        <ListItemText primary={item.getName()} />
        {item.getChildren().length > 0 ? this.renderChildren(item, 0) : <div />}
      </ListItem>
    );
  };
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // render children
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  renderChildren = (item: MpgItem, offset: number) => {
    offset += 5;
    return (
      <div>
        <List>
          {item.getChildren().map(child => {
            this.renderItemCard(child, offset);
          })}
        </List>
      </div>
    );
  };
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // handle item clicked
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  ///////////////////////////////////////////////////////////////////////////////////////////////
  // handle update item (any item)
  ///////////////////////////////////////////////////////////////////////////////////////////////
  handleItemUpdate = async (evet: any, item: MpgItem) => {
    console.log(
      "MpgTreeComp: handleItemUpdate: item seclected:",
      item.getName()
    );
    // await this.props.mpgGraph.setDisplayMode(MpgDisplayMode.Update);
    // await this.props.mpgGraph.setCurrentCategoryId(tag.getCategoryId());
    // await this.props.mpgGraph.setCurrentItemId(tag.getId());
    // await this.props.history.push("/ItemDetails");
  };
  //////////////////////////////////////////////////////////////////////////////////////////////
  // component will receive props
  ///////////////////////////////////////////////////////////////////////////////////////////////
  componentWillReceiveProps(newProps: ITreeProps) {
    this.setState({
      rootItems: this.props.mpgGraph.getRootItems(newProps.itemList)
    });
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////
// wrap the component withRouter
///////////////////////////////////////////////////////////////////////////////////////////////
const MpgTreeComp = withRouter(MpgTreeCompBase);
export default MpgTreeComp;
